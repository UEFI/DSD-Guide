<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>_DSD (Device Specific Data) Implementation Guide</title>
<date>January 2021</date>
<author>
<personname>
<firstname>UEFI</firstname>
<othername>ACPI</othername>
<surname>Specification Working Group</surname>
</personname>
</author>
<authorinitials>UAS</authorinitials>
<revhistory>
<revision>
<revnumber>2.0-rc0</revnumber>
<date>January 2021</date>
<authorinitials>UAS</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>

</preface>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>This is the ACPI _DSD Implementation Guide.  This guide and its associated
documents provide recommendations on the use of the _DSD (Device Specific
Data) object as defined in the ACPI Specification <xref linkend="ACPI"/>.  The _DSD
object is a device specific configuration object, intended for firmware
and software engineers implementing _DSD or designing software that will
use information supplied by the object.</simpara>
<simpara>The _DSD, as defined by the ACPI Specification, returns a Package, the
first and every odd element of which is a Universal Unique Identifier
(UUID) and every even element of which is a Package (Data Structure),
where each of the UUIDs dictates the format of the Data Structure
immediately following it. The well-known UUIDs to use in the _DSD
output and the Data Structure formats associated with them are also
specified in this document.</simpara>
<section xml:id="_copyright_and_license_information">
<title>Copyright and License Information</title>
<simpara>The _DSD Implementation Guide is &#169; 2021, Unified Extensible Firmware
Interface (UEFI) Forum, Inc.  More specifically, content is under the
purview of the ACPI Specification Working Group (ASWG) &lt;<link xl:href="mailto:aswg@uefi.org">aswg@uefi.org</link>&gt;.</simpara>
<simpara>The _DSD Implementation Guide is licensed under the Creative Commons
Attribution 4.0 International License (CC-BY 4.0).  The full license
text is available at <link xl:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</link>.</simpara>
</section>
<section xml:id="_change_log">
<title>Change Log</title>
<itemizedlist>
<listitem>
<simpara>Version 2.0</simpara>
<itemizedlist>
<listitem>
<simpara>Initial conversion to asciidoc from original v1.2.</simpara>
</listitem>
<listitem>
<simpara>General text rewrites and reformatting.</simpara>
</listitem>
<listitem>
<simpara>Expand the Terms section.</simpara>
</listitem>
<listitem>
<simpara>Add a licensing section.</simpara>
</listitem>
<listitem>
<simpara>Add a bibliography and references section.</simpara>
</listitem>
<listitem>
<simpara>Add in process and naming recommendations.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_terms">
<title>Terms</title>
<simpara>The key words <emphasis role="strong">MUST</emphasis>, <emphasis role="strong">MUST NOT</emphasis>, <emphasis role="strong">REQUIRED</emphasis>, <emphasis role="strong">SHALL</emphasis>, <emphasis role="strong">SHALL
NOT</emphasis>, <emphasis role="strong">SHOULD</emphasis>, <emphasis role="strong">SHOULD NOT</emphasis>, <emphasis role="strong">RECOMMENDED</emphasis>,  <emphasis role="strong">MAY</emphasis>, and
<emphasis role="strong">OPTIONAL</emphasis> in this document are to be interpreted as described in
IETF <xref linkend="RFC2119"/>.</simpara>
<simpara>The following additional terms are used in this document:</simpara>
<variablelist>
<varlistentry>
<term>ACPI</term>
<listitem>
<simpara>Advanced Configuration and Power Interface specification.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ASWG</term>
<listitem>
<simpara>ACPI Specification Working Group</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Device</term>
<listitem>
<simpara>Hardware component or set of interrelated hardware registers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Device ID</term>
<listitem>
<simpara>Plug and Play ID or ACPI ID of a device.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>GUID</term>
<listitem>
<simpara>Globally Unique Identifier. A 128-bit value used to uniquely
name entities. A unique GUID can be generated by an individual
without the help of a centralized authority. This allows the
generation of names that will never conflict, even among multiple,
unrelated parties.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>OSPM</term>
<listitem>
<simpara>Operating System Power Management</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>PNP</term>
<listitem>
<simpara>Plug and Play</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>UEFI</term>
<listitem>
<simpara>Unified Extensible Firmware Interface</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>UUID</term>
<listitem>
<simpara>Universal Unique Identifier, a synonym for GUID.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_conventions">
<title>Conventions</title>
<simpara>The following typographic connventions are used:</simpara>
<variablelist>
<varlistentry>
<term>Computer Text</term>
<listitem>
<simpara><literal>monospace text</literal> is used to represent computer
inputs or outputs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Stress</term>
<listitem>
<simpara><emphasis role="strong">bold text</emphasis> is used to add emphasis to terms.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Terms</term>
<listitem>
<simpara><emphasis>italic text</emphasis> is used to highlight important terminology.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_references">
<title>References</title>
<bibliodiv>
<bibliomixed>
<bibliomisc><anchor xml:id="ACPI" xreflabel="[ACPI]"/> Advanced Configuration and Power Interface (ACPI) Specification,
Version 6.3, January 2019.  Copyright (c) 2018, Unified Extensible
Firmware Interface (UEFI) Forum, Inc. <link xl:href="https://uefi.org/specifications">https://uefi.org/specifications</link></bibliomisc>
</bibliomixed>
<bibliomixed>
<bibliomisc><anchor xml:id="RFC2119" xreflabel="[RFC2119]"/> <link xl:href="https://www.ietf.org/rfc/rfc2119.txt">https://www.ietf.org/rfc/rfc2119.txt</link></bibliomisc>
</bibliomixed>
</bibliodiv>
</section>
</chapter>
<chapter xml:id="_general_recommendations">
<title>General Recommendations</title>
<section xml:id="_using_dsd_versus_dsm">
<title>Using <literal>_DSD</literal> versus <literal>_DSM</literal></title>
<simpara>Although in principle the <literal>_DSM</literal> (Device Specific Method) may be used to
implement the functionality provided by <literal>_DSD</literal>, it is not recommended to
do so. Since <literal>_DSD</literal> is better suited for providing device configuration
data, it should be used for this purpose where applicable. However, there
are situations in which where using <literal>_DSM</literal> instead of <literal>_DSD</literal> needs to
be considered. Generally, all situations in which it would be necessary to
implement <literal>_DSD</literal> as a <literal>Method()</literal> for technical reasons fall into this
category, but in particular <literal>_DSD</literal> should not write into device
registers in addition to returning the data. In addition to that, <literal>_DSD</literal>
must return the same data every time it is evaluated, so if that cannot
be guaranteed, <literal>_DSM</literal> has to be used instead.</simpara>
</section>
<section xml:id="_general_dsd_definition_template">
<title>General <literal>_DSD</literal> Definition Template</title>
<simpara>Wherever possible, it is recommended to implement <literal>_DSD</literal> as a <literal>Name()</literal>
as opposed to a <literal>Method()</literal> in order to avoid possible programmatic
errors and computational overhead that are sometimes associated with
the execution of AML (ASL Machine Language) code. In that case the
definition of <literal>_DSD</literal> should follow this template:</simpara>
<formalpara>
<title>General <literal>_DSD</literal> Template</title>
<para>
<literallayout class="monospaced">    Name (_DSD, Package () {
        ToUUID("UUID1"),
        Package () {
           ...
        },

        ToUUID("UUID2"),
        Package () {
           ...
        },

        ...

        ToUUID("UUIDn"),
        Package () {
           ...
        }

    })</literallayout>
</para>
</formalpara>
<simpara>As noted in the introduction, <literal>_DSD</literal> returns a <literal>Package()</literal> with
one or more pairs of elements.  The first element of each pair&#8201;&#8212;&#8201;i.e.,
the first and every following odd element of the total <literal>Package()</literal>&#8201;&#8212;&#8201;is a Universal Unique Identifier (UUID).  The second element of each
pair&#8201;&#8212;&#8201;and every even element of the total <literal>Package()</literal>&#8201;&#8212;&#8201;is another
<literal>Package()</literal> Data Structure.  Each UUID dictates the format and content
of the Data Structure immediately following it.</simpara>
<simpara>Only the well-known UUIDs and their corresponding Data Structures defined
in this guide should be used.  The behavior of any other UUIDs and Data
Structures are <emphasis role="strong">undefined</emphasis>.</simpara>
</section>
</chapter>
<chapter xml:id="_well_known_dsd_uuids_and_data_structure_formats">
<title>Well-Known <literal>_DSD</literal> UUIDs and Data Structure Formats</title>
<section xml:id="_device_properties_uuid">
<title>Device Properties UUID</title>
<simpara>This section specifies the data format associated with UUID:</simpara>
<simpara><emphasis role="strong">daffd814-6eba-4d8c-8a91-bc9bbf4aa301</emphasis></simpara>
<simpara>(Device Properties UUID) for the <literal>_DSD</literal> (Device Specific Data) ACPI
device configuration object.</simpara>
<section xml:id="_data_format_definition">
<title>Data Format Definition</title>
<simpara>The device properties UUID:</simpara>
<simpara><emphasis role="strong">daffd814-6eba-4d8c-8a91-bc9bbf4aa301</emphasis></simpara>
<simpara>defines the data format for the <literal>Package()</literal> (Data Structure) immediately
following it as a list of Packages of length two (2), known as Properties.
The first element of each Property (the Key) must be a String and the
second element (the Value) must be:</simpara>
<itemizedlist>
<listitem>
<simpara>an Integer,</simpara>
</listitem>
<listitem>
<simpara>a String,</simpara>
</listitem>
<listitem>
<simpara>a Reference, or</simpara>
</listitem>
<listitem>
<simpara>a Package consisting entirely of Integer, String, or Reference objects
(and specifically not containing a nested Package).</simpara>
</listitem>
</itemizedlist>
<simpara>The list of valid Keys, and the format and interpretation of the
corresponding Values, depends on the PNP or ACPI device ID (e.g., <literal>_HID</literal>)
of the Device containing the <literal>_DSD</literal>.  For instance, the PNP device ID
returned by <literal>_HID</literal> for Device object <literal>MDEV</literal> below will determine the
list of valid Keys and the corresponding Value data formats for that
Device object&#8217;s <literal>_DSD</literal>.</simpara>
<literallayout class="monospaced">Device (MDEV) {
    Name (_HID, "PNP####")

    Name (_DSD, Package () {
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...},     // Property 1
            Package (2) {...},     // Property 2
            ...
            Package (2) {...}      // Property n
        }
    })
    ...
}</literallayout>
<simpara>In the context of the Device Properties UUID, each Property is a
characteristic of the hardware itself or the way it is used in the
system in which it is incorporated, as opposed to software configuration
data. As such, the list of valid property Keys and Value data formats
associated with them must be defined by the device vendor in a way that
is independent of the firmware interface to be used on any given platform.</simpara>
<simpara>Multiple Properties with the same Key in a single Data Structure associated
with the Device Properties UUID are not permitted.</simpara>
</section>
<section xml:id="_device_properties_uuid_rules">
<title>Device Properties UUID Rules</title>
<simpara>Properties described in a Device Properties UUID <literal>_DSD</literal> are intended
to be used in addition to, and not instead of, the existing mechanisms
defined by the ACPI specification. For this reason, as a rule, Device
Properties should only be used if the ACPI specification does not make
direct provisions for handling the underlying use case. ACPI provides
a number of generic interfaces to operating systems kernels, and
these should continue to function without requiring the kernels to
directly parse a device properties <literal>_DSD</literal>. For example, properties
that describe how to turn voltage regulators, or clocks, on and off,
should not be used, as these should be managed via power resource
<literal>_ON</literal>/<literal>_OFF</literal> methods, or device <literal>_PSx</literal> methods.</simpara>
<simpara>It is not permitted to use Properties in a data structure associated
with the Device Properties UUID to provide the OSPM and device drivers
with the same information that can be provided as device resources
via <literal>_CRS</literal> (Current Resource Settings). In case of any conflicts
between such Properties and the information returned by <literal>_CRS</literal>, the
latter always takes precedence.</simpara>
<simpara>Properties of a Device may depend on the order of the resources
provided via <literal>_CRS</literal> or the order of the resources of a particular
type. For instance, a Property may identify an IRQ via an index into
the IRQ resources provided via <literal>_CRS</literal> rather than providing an absolute
IRQ number. This avoids duplication between the Properties and <literal>_CRS</literal>,
making it easier to change the resources of a Device in one place.</simpara>
</section>
<section xml:id="_property_naming">
<title>Property Naming</title>
<simpara>While the Key for a Property may be any String, there is the possibility
of name collision.  For example, two vendors could use the String
<literal>"interrupts"</literal> as a Key.  The problem is that each vendor may have
very different use cases for the Value.  One use case could be a
Boolean value (<literal>"yes"</literal> means interrupts are supported, <literal>"no"</literal> means
the device must be polled).  A second use case could be a list
of valid IRQs for the device (<literal>Package() {1, 2, 3}</literal>).</simpara>
<simpara>It is highly recommended that each vendor prefix their Key name with
their registered PNP or ACPI vendor ID in order to avoid name collisions.
For example, use <literal>abcd-interrupts</literal> instead of <literal>interrupts</literal>, especially
if the word is known to be in common use in the kernel.</simpara>
</section>
<section xml:id="_examples">
<title>Examples</title>
<section xml:id="_example_valid_property_representations">
<title>Example Valid Property Representations</title>
<simpara>The following examples illustrate valid Property Value data types
for the Device Properties UUID.</simpara>
<literallayout class="monospaced">Package (2) {"length", 16}
Package (2) {"device", \_SB.FOO.BAZ}
Package (2) {"sizes", Package (3) {16, 32, 0}}
Package (2) {"labels", Package (4) {"foo", _SB.FOO, "bar", __SB.BAR)}
Package (2) {"default-state", "on"}</literallayout>
</section>
</section>
<section xml:id="_dsd_dependency_on_crs">
<title><literal>_DSD</literal> Dependency on <literal>_CRS</literal></title>
<simpara>The following example illustrates a dependency of Properties
returned by <literal>_DSD</literal> (with the Device Properties UUID) on device
resources returned by <literal>_CRS</literal>. In this particular case, the <literal>"gpios"</literal>
Properties returned by the <literal>_DSD</literal> for devices <literal>LEDH</literal> and <literal>LEDM</literal>
contain references to <literal>GpioIo</literal> resources in the <literal>_CRS</literal> of device
<literal>LEDS</literal>.</simpara>
<simpara>Each of these references consists of a path to the device
object containing the <literal>_CRS</literal> in question and three integer numbers.
The first two of these numbers are indexes to the <literal>_CRS</literal> content.
Specifically, they are the index of the <literal>GpioIo</literal> resource and the
index of the pin in that resource’s GPIO pin list pointed to by the
given reference, respectively.  The fourth number is an additional
parameter to be consumed by the driver of the <literal>LEDS</literal> device.</simpara>
<simpara>This means that the <literal>"gpios"</literal> Property of device <literal>LEDH</literal> in this
example points to the first (index 0) <literal>GpioIo</literal> resource in the <literal>_CRS</literal>
of device <literal>LEDS</literal> and to the first (index 0) pin in its GPIO pin list
(pin 10). In turn, the <literal>"gpios"</literal> Property of device <literal>LEDM</literal> points
to the second (index 1) <literal>GpioIo</literal> resource in the <literal>_CRS</literal> of device
<literal>LEDS</literal> and to the first (index 0) pin in its GPIO pin list (pin 11).</simpara>
<literallayout class="monospaced">Scope (\_SB.PCI0.LPC)
{
    Device (LEDS)
    {
        Name (_HID, "PNP####")

        Name (_CRS, ResourceTemplate ()
        {
            GpioIo (Exclusive, PullDown, 0, 0, IoRestrictionOutputOnly,
                    "\\_SB.PCI0.LPC", 0, ResourceConsumer,,) { 10 }
            GpioIo (Exclusive, PullUp, 0, 0, IoRestrictionInputOnly,
                    "\\_SB.PCI0.LPC", 0, ResourceConsumer,,) { 11 }
        })

        Device (LEDH)
        {
            Name (_HID, "PNP####")
            Name (_DSD, Package () {
                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
                Package () {
                    Package (2) {"label", "Heartbeat"},
                    Package (2) {"gpios", Package (4) {
                                            \_SB.PCI0.LPC.LEDS, 0, 0, 1
                    }},
                    Package (2) {"default-trigger", "heartbeat"},
                    Package (2) {"default-state", "on"},
                    Package (2) {"retain-state-suspended", 1},
                }
            })
        }

        Device (LEDM)
        {
            Name (_HID, "PNP####")

            Name (_DSD, Package () {
                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
                Package () {
                    Package (2) {"label", "MMC0 Activity"},
                    Package (2) {"gpios", Package (4) {
                                            \_SB.PCI0.LPC.LEDS, 1, 0, 1
                    }},
                    Package (2) {"default-trigger", "mmc0"},
                    Package (2) {"default-state", "on"},
                    Package (2) {"retain-state-suspended", 1},
                }
            })
        }
    }
}</literallayout>
</section>
</section>
<section xml:id="_hierarchical_data_extension_uuid">
<title>Hierarchical Data Extension UUID</title>
<simpara>This section specifies the data format associated with UUID:</simpara>
<simpara><emphasis role="strong">dbb8e3e6-5886-4ba6-8795-1319f52a966b</emphasis></simpara>
<simpara>(Hierarchical Data Extension UUID) for the <literal>_DSD</literal> (Device Specific Data) ACPI
device configuration object.</simpara>
<section xml:id="_data_format_definition_2">
<title>Data Format Definition</title>
<simpara>The Hierarchical Data Extension UUID:</simpara>
<simpara><emphasis role="strong">dbb8e3e6-5886-4ba6-8795-1319f52a966b</emphasis></simpara>
<simpara>defines the data format for the <literal>Package()</literal> (Data Structure) immediately
following it as a list of Packages of length two (2), known as Sub-node Links.
The first element of each Sub-node Link (the Key) must be a String and the
second element (the Target) must be either a String encoding the name of
the referenced ACPI object or a reference to the ACPI object. That name
can be a fully qualified path, a relative path, or a simple name segment
utilizing the ACPI namespace search rules as defined by the ACPI
specification <xref linkend="ACPI"/> (Section 5.3 “ACPI Namespace”, Section 19.2.2
“ASL Name and Pathname Terms” and Section 19.3.2.2 “Strings”).</simpara>
<simpara>Moreover, the ACPI object pointed to by the Target (the Target Object)
must evaluate to a Package formatted in accordance with the <literal>_DSD</literal>
return value format defined by the ACPI specification (Section 6.2.5).
Also, like <literal>_DSD</literal>, it must return the same data every time it is
evaluated and the meaning of those data is the same as for analogous
data returned by <literal>_DSD</literal>.</simpara>
<simpara>The Key of each Sub-node Link must be unique within the enclosing
Data Structure.  That is, it is invalid to put two Sub-node Links
with identical Keys into one enclosing Package.</simpara>
<simpara>This allows hierarchical device configuration information to be
represented as a hierarchy of ACPI objects returning Packages
following the <literal>_DSD</literal> data Package formatting rules. Then, each
of those objects may be regarded as a Data-only Subnode of the
Device object holding the <literal>_DSD</literal> at the top of the hierarchy.</simpara>
<simpara>For maximum interoperability, it is recommended to put all
Target Objects referenced as Strings into the same scope in
which the objects that return data including their names are located.
If using object references, the resolution of the referenced object
is managed by the AML interpreter, and there is no limitation
placed on the location of the referenced object.</simpara>
<simpara>If the Target of any property within a Package is a Reference, then
all Targets within and beneath the Package must also be References,
not Strings. Implementers are encouraged to use exclusively Strings
or References throughout the hierarchy.</simpara>
</section>
<section xml:id="_example">
<title>Example</title>
<simpara>The following example illustrates the possible use of the Hierarchical
Data Extension UUID and Sub-node Links. It contains a definition of a
master Device (<literal>SWC0</literal>), three Data-only Sub-nodes (<literal>DP0P</literal>, <literal>DPNP</literal>,
<literal>DP00</literal>) and one child Device object (<literal>SWD0</literal>) under it. In addition,
the Data-only Sub-node <literal>DP00</literal> is a Sub-node of <literal>DPNP</literal> (which is a
direct Sub-node of the master Device). Additionally, a common set of
properties (<literal>COMN</literal>) is provided and referenced by <literal>DP0P</literal>, <literal>DPNP</literal>,
and <literal>DP00</literal>. This allows the firmware developer to ensure that
information common to multiple devices is identical.</simpara>
<literallayout class="monospaced">Device(SWC0) {
    Name(_HID, "VEND0000") // sample Vendor ID - do not use
    Name(_DSD, Package() {
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...}, // Property 1
            ...
            Package (2) {...}, // Property n
        },
        ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),
        Package () {
            Package (2) {"Alice", "DP0P"} // String example
            Package (2) {"Frank", “DPNP”} // String example
        }
    })

    Name(DP0P, Package(){ // Data-only subnode of SWC0
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...}, // Property 1
            ...
            Package (2) {...} // Property n
        },
        ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),
        Package () {
            Package (2) {"common-properties", ^COMN} // Reference
        }
    })

    Name(DPNP, Package(){ // Data-only subnode of SWC0
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...}, // Property 1
            Package (2) {...} // Property 2
        },
        ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),
        Package () {
            Package (2) {"child-of-Frank", "DP00"},
            Package (2) {"common-properties", ^COMN} // Reference
        }
    })

    Name(DP00, Package(){ // Data-only subnode of DPNP
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...}, // Property 1
            ...
            Package (2) {...} // Property n
        },
        ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),
        Package () {
            Package (2) {"common-properties", ^COMN} // Reference
        }
    })

    Device (SWD0) {
        Name(_ADR, ...)
        Name(_DSD, Package() {
            ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
            Package () {
                Package (2) {...}, // Property 1
                ...
                Package (2) {...} // Property n
            }
        })
    } // End SWD0

    Name(COMN, Package() { // Common properties
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
            Package (2) {...}, // Property 1
            ...
            Package (2) {...} // Property n
        }
    }) // End COMN

} // End SWC0</literallayout>
</section>
</section>
<section xml:id="_device_graph_uuid">
<title>Device Graph UUID</title>
<simpara>Graphs are a concept that is often observed in computing. A graph is
a set of <emphasis>nodes</emphasis> that are connected together through <emphasis>links</emphasis> that
represent logical relationships. Often, hardware components relate to
each other functionally, or have physical connections to each other,
forming a graph. An example is shown below.</simpara>
<figure>
<title>Debug Trace Graph</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig1.png"/>
</imageobject>
<textobject><phrase>Debug Trace Graph</phrase></textobject>
</mediaobject>
</figure>
<simpara>This Debug Trace Graph includes Trace Sources (Trace 1 and Trace 2)
that produce traces, multiplexors that combine traces from one or more
sources, and multiple Sinks to which traces are fed. The Traces could
be generated by debug logic attached to devices or logical blocks
in a system.  Some OS drivers need to be able to process graphs such
as these in order to function properly.</simpara>
<simpara>This section specifies the data format associated with UUID:</simpara>
<simpara><emphasis role="strong">ab02a46b-74c7-45a2-bd68-f7d344ef2153</emphasis></simpara>
<simpara>(Device Graph UUID) for the <literal>_DSD</literal> (Device Specific Data) ACPI
device configuration object.</simpara>
<section xml:id="_data_format_definition_3">
<title>Data Format Definition</title>
<simpara>The Device Graph UUID:</simpara>
<simpara><emphasis role="strong">ab02a46b-74c7-45a2-bd68-f7d344ef2153</emphasis></simpara>
<simpara>defines the format of a Package Data Structure containing a set of
one or more Graph Entries; the Data Structure is as follows:</simpara>
<literallayout class="monospaced">Package () {
    Revision,                 // Integer, must be zero
    NumberOfGraphs,           // N in the list below
    Graph[1],                 // N graphs that this device belongs to
    ...
    Graph[N]
}</literallayout>
<simpara>Each Graph Entry (<literal>Graph[<emphasis>n</emphasis>]</literal> above) is in turn a Package with the
following format:</simpara>
<literallayout class="monospaced">Package () {
    GraphID,       // Integer, identifies a graph the
                   // parent device belongs to
    UUID,          // 16-byte buffer UUID for
                   // specification that governs this
                   // graph
    NumberOfLinks, // Integer for number of links on this
                   // node
    Links[1],      // List of graph links, with
                   // NumberOfLinks entries.
    ...
    Links[N]
}</literallayout>
<simpara>Finally, each Link in a Graph Entry is a package with the
following format:</simpara>
<literallayout class="monospaced">Package () {
    SourcePortAddress,           // Integer
    DestinationPortAddress,      // Integer
    DestinationDeviceName,       // Reference to another
                                 // device in the name space
}</literallayout>
<simpara>Devices represent vertices in a Graph. A device can indicate that it
participates in a graph by providing a <literal>_DSD</literal> Graph object in its
scope. The object primarily lists the connections the device has to
other devices in a given graph. The <literal>_DSD</literal> Graph object has the
following fields:</simpara>
<variablelist>
<varlistentry>
<term><emphasis>Revision</emphasis></term>
<listitem>
<simpara>Must be zero</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>NumberOfGraphs</emphasis></term>
<listitem>
<simpara>Specifies the number of graphs that the current
device is a part of.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>Graph[N]</emphasis></term>
<listitem>
<simpara>List of Packages (Graph Entries) that specifies the
characteristics of each Graph that the current device is a member of.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The Graph Entry Package itself is composed of the following fields:</simpara>
<variablelist>
<varlistentry>
<term><emphasis>GraphID</emphasis></term>
<listitem>
<simpara>An identifier for the Graph. Each Graph has a unique
identifier and it illegal for a given device to provide more
than one <literal>_DSD</literal> Graph object with the same identifier value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>UUID</emphasis></term>
<listitem>
<simpara>A UUID that identifies the specification that governs
the behavior of the graph.  Known UUIDs and associated specifications
are listed at the end of this section.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>NumberOfLinks</emphasis></term>
<listitem>
<simpara>the number of Links the parent device has to the
other devices on the graph identified by the <literal>_DSD</literal> graph object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>Link[N]</emphasis></term>
<listitem>
<simpara>Each Link entry is in turn a Package, that contains a
source port address, a destination port address and a destination
device reference.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The behavior of a Graph and its meaning is determined by the devices
themselves and their drivers. Therefore, the properties of a Link&#8201;&#8212;&#8201;ports and directionality&#8201;&#8212;&#8201;are determined by the devices themselves
and their drivers. To identify the meaning, each graph in a
Device Graph <literal>_DSD</literal> object carries a UUID which in turns links to
a vendor provided specification for the Graph. The specification
determines how the Graph is to be understood by device drivers.</simpara>
<simpara>A Link Package may be extended with additional vendor defined data.
The Graph specification determines how that data is to be interpreted.</simpara>
</section>
<section xml:id="_example_2">
<title>Example</title>
<simpara>The following ASL describes four devices which are connected in
two independent Device Graphs. The graphs are illustrated in the
following figure. In this example, devices <literal>ABC</literal>, <literal>DEF</literal> and
<literal>GHI</literal> are interconnected in the first graph topology. Devices
<literal>ABC</literal>, <literal>GHI</literal> and <literal>JKL</literal> are interconnected in a second graph
topology.</simpara>
<figure>
<title>Four Devices Interconnected in Two Graphs</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig2.png" contentwidth="Two Graphs"/>
</imageobject>
<textobject><phrase>Four Devices</phrase></textobject>
</mediaobject>
</figure>
<literallayout class="monospaced">Scope (\_SB) {
    Device (ABC) {
    ...
    Name (_DSD, Package () {
        ToUUID("ab02a46b-74c7-45a2-bd68-f7d344ef2153"),
        Package() {
            0, // Revision
            2, // NumberOfGraphs
            Package() {
                1, // GraphID - Graph 1
                ToUUID(‘‘UUID_For_Graph_Arch’’),
                2, // Number of links
                Package (3) {0,3,\_SB.DEF},
                Package (3) {1,10,\_SB.GHI}
            },
            Package() {
                2, // GraphID - Graph 2
                ToUUID(‘‘UUID_For_Graph_Arch’’),
                1, // Number of links
                Package (3) {2,380,\_SB.JKL}
            }
        },
    })
    ...

    Device (DEF) {
        ...
        Name (_DSD, Package () {
            ToUUID("ab02a46b-74c7-45a2-bd68-f7d344ef2153"),
            Package() {
                0, // Revision
                1, // NumberOfGraphs
                Package() {
                    1, // GraphID - Graph 1
                    ToUUID(‘‘UUID_For_Graph_Arch’’),
                    1, // Number of links
                    Package (3) {5,20,\_SB.GHI}
                }
            }
        })
        ...
    }

    Device (GHI) {
        ...
        Name (_DSD, Package () {
            ToUUID("ab02a46b-74c7-45a2-bd68-f7d344ef2153"),Package() {
                0, // Revision
                2, // NumberOfGraphs
                Package () {
                    1, // GraphID - Graph 1
                    ToUUID(‘‘UUID_For_Graph_Arch’’),
                    1, // Number of links
                    Package (3) {10,1,\_SB.ABC}
                },
                Package() {
                    2, // GraphID - Graph 2
                    ToUUID(‘‘UUID_For_Graph_Arch’’),
                    1, // Number of links
                    Package (3) {30,210,\_SB.JKL},
                }
            }
        })
        ...
    }
}</literallayout>
</section>
<section xml:id="_known_device_graph_uuids">
<title>Known Device Graph UUIDs</title>
<section xml:id="_arm_coresight_acpi_specification">
<title>Arm Coresight ACPI Specification</title>
<simpara><emphasis role="strong">3ECBC8B6-1D0E-4FB3-8107-E627F805C6CD</emphasis></simpara>
<simpara><link xl:href="https://developer.arm.com/docs/den0067/latest/acpi-for-coresighttm-10-platform-design-document">https://developer.arm.com/docs/den0067/latest/acpi-for-coresighttm-10-platform-design-document</link></simpara>
</section>
</section>
</section>
</chapter>
</book>